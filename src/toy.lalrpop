use crate::ast::*;
use std::str::FromStr;

#[LALR]
grammar(ast: &mut Ast);

match {
    "(" => L_PAREN,
    ")" => R_PAREN,
    "+" => PLUS,
    "-" => MINUS,
    "*" => STAR,
    "/" => SLASH,
    "=" => EQUAL,
    ";" => SEMICOLON,
    "print" => PRINT,

    r"0|([1-9][0-9]*)",
    r"[a-zA-Z_$][0-9a-zA-Z_$]*",
    r"\s*" => {},
}

IDENTIFIER : String = {
    r"[a-zA-Z_$][0-9a-zA-Z_$]*" => <>.to_string()
}

IntegerLiteral: u32 = {
    // normal integers
    r"0|([1-9][0-9]*)" => u32::from_str(<>).unwrap()
}

Term : ExpressionKey = {
    L_PAREN <Expression> R_PAREN,
    IntegerLiteral => ast.insert_expr(Expression::Literal(<>)),
    IDENTIFIER => ast.insert_expr(Expression::Var(<>)),
}

Factor : ExpressionKey = {
    <a:Factor> STAR <b:Term> => ast.insert_expr(Expression::Times(a, b)),
    <a:Factor> SLASH <b:Term> => ast.insert_expr(Expression::Div(a, b)),
    Term,
}

Expression : ExpressionKey = {
    <a:Expression> PLUS <b:Factor> =>
        ast.insert_expr(Expression::Plus(a, b)),
    <a:Expression> MINUS <b:Factor> =>
        ast.insert_expr(Expression::Minus(a, b)),
    Factor,
}

Declaration : DeclarationKey = {
    <id:IDENTIFIER> EQUAL <val:Expression> => ast.insert_decl(Declaration {id, val})
}

Statement : StatementKey = {
    <Declaration> SEMICOLON => ast.insert_stmt(Statement::Decl(<>)),
    PRINT <Expression> SEMICOLON => ast.insert_stmt(Statement::Print(<>)),
}

pub Program: Vec<StatementKey> = {
    Statement*
}